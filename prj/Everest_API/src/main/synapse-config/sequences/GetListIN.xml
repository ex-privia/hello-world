<?xml version="1.0" encoding="UTF-8"?>
<sequence name="GetListIN" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <log level="custom">
        <property name="mylog" value="***************************** RECEIVED REQUEST FROM THE CLIENT **************************"/>
    </log>
    <filter xpath="$body/jsonObject/geometry">
        <then>
            <property expression="fn:concat('g=', $body/jsonObject/geometry)" name="geometryParam" scope="default" type="STRING"/>
        </then>
        <else/>
    </filter>
    <script language="js"><![CDATA[//
            	var payloadJSON = mc.getPayloadJSON();
				var entityType = "";
				if( 'entityType' in payloadJSON){
					entityType = payloadJSON.entityType;
				}
				var query = "";
				if( entityType === "resource"){
				 	mc.setProperty("entityType", "NO_RO");
					var ro = "";
					if( 'ro' in payloadJSON){
						ro = payloadJSON.ro;
					}
					var orderBy = "ORDER BY ?created ?entryOf ?resource ?creator ?type";
					if( 'orderBy' in payloadJSON){
						orderBy = "ORDER BY " + payloadJSON.orderBy;
					}
					query = "\
						PREFIX ore: <http://www.openarchives.org/ore/terms/>\
						PREFIX  ao:    <http://purl.org/ao/>\
						PREFIX dct: <http://purl.org/dc/terms/>\
						PREFIX ro: <http://purl.org/wf4ever/ro#>\
						SELECT ?resource ?creator ?created ?name ?filesize ?title ?desc ?proxy ?entryOf\
						WHERE {\
						<" + ro + "> ore:isDescribedBy ?RoManifest ;\
									 ore:aggregates ?resource .\
						GRAPH ?RoManifest{\
							?resource a ro:Resource .\
							OPTIONAL { [a ro:Folder] ore:isDescribedBy ?folderMap.\
								GRAPH ?folderMap{\
									[a ro:FolderEntry; ore:proxyFor ?resource] ore:proxyIn ?entryOf \
								}\
							}\
							OPTIONAL { ?resource dct:creator ?creator}\
							OPTIONAL { ?resource dct:created ?created}\
							OPTIONAL { ?resource ro:name ?name}\
							OPTIONAL { ?resource ro:filesize ?filesize}\
							?proxy ore:proxyFor ?resource\
							OPTIONAL { ?annotation ro:annotatesAggregatedResource ?resource;\
										ao:body ?titlebody.\
								GRAPH ?titlebody{\
									?resource dct:title ?title\
									}\
								}\
							OPTIONAL { ?annotation2 ro:annotatesAggregatedResource ?resource;\
										ao:body ?descbody.\
								GRAPH ?descbody{\
									?resource dct:description ?desc\
									}\
								}\
							} \
						} " + orderBy + "\
					";
				}else if( entityType === "RO"){
				    mc.setProperty("entityType", "RO");
					var vrc = "";
					if( 'vrc' in payloadJSON){
						mc.setProperty("sparqlQuery", "sparqlQuery");
						vrc = "FILTER regex( str( ?vrc), \"" + payloadJSON.vrc + "\", \"i\") ";
					}
	            	var createdInterval = "";
					if( 'since_YYYY-MM-DD' in payloadJSON){
					    mc.setProperty("sparqlQuery", "sparqlQuery");
		            	createdInterval += "\
						    FILTER ( ?created >= \"" + payloadJSON["since_YYYY-MM-DD"] + "T00:00:00.000Z\"^^xsd:dateTime) \
						";
					}
					if( 'till_YYYY-MM-DD' in payloadJSON){
						mc.setProperty("sparqlQuery", "sparqlQuery");
		            	createdInterval += "\
						    FILTER ( ?created <= \"" + payloadJSON["till_YYYY-MM-DD"] + "T23:59:59.999Z\"^^xsd:dateTime) \
						";
					}
					var title = "";
					if( 'title' in payloadJSON){
						mc.setProperty("sparqlQuery", "sparqlQuery");
						title = "FILTER regex( str( ?title), \"" + payloadJSON.title + "\", \"i\")";
					}
					var description = "";
					if( 'description' in payloadJSON){
						mc.setProperty("sparqlQuery", "sparqlQuery");
						description = "FILTER regex( str( ?description), \"" + payloadJSON.description + "\", \"i\")";
					}
					var creator = "";
					if( 'creator' in payloadJSON){
						mc.setProperty("sparqlQuery", "sparqlQuery");
						creator = "FILTER regex( str( ?creator), \"" + payloadJSON.creator + "\", \"i\")";
					}
					var status = "";
					if( 'status' in payloadJSON){
						mc.setProperty("sparqlQuery", "sparqlQuery");
						status = "FILTER EXISTS{ ?ro a roevo:" + payloadJSON.status + "}";
					}
					var ro = "";
					if( 'ro' in payloadJSON){
						mc.setProperty("sparqlQuery", "sparqlQuery");
						ro = "FILTER regex( str( ?ro), \"" + payloadJSON.ro + "\", \"i\")";
					}
					var orderBy = "ORDER BY ?title ?created ?creator ?ro ?description ?vrc ?status";
					if( 'orderBy' in payloadJSON){
						orderBy = "ORDER BY " + payloadJSON.orderBy;
					}
					query = "\
					PREFIX dct: <http://purl.org/dc/terms/>\
					PREFIX dcterms: <http://purl.org/dc/terms/>\
					PREFIX ro: <http://purl.org/wf4ever/ro#>\
					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\
					PREFIX acs: <http://www.acsys.it/everest#>\
					PREFIX roevo: <http://purl.org/wf4ever/roevo#>\
					PREFIX foaf: <http://xmlns.com/foaf/0.1/>\
					SELECT ?ro ?created ?title ?description ?vrc ?creatorName ?creator (IF(EXISTS{ ?ro a roevo:LiveRO}, \"LiveRO\", IF( EXISTS{ ?ro a roevo:SnapshotRO}, \"SnapshotRO\", \"ArchivedRO\")) as ?status)\
					WHERE { \
					 	?ro a ro:ResearchObject .\
					    OPTIONAL { ?ro acs:vrc ?vrc } .\
					    OPTIONAL { ?ro dct:created ?created } .\
						OPTIONAL { ?ro dct:title ?title } .\
						OPTIONAL { ?ro dct:description ?description } .\
						OPTIONAL { ?ro dcterms:creator ?creator .\
						OPTIONAL { ?creator foaf:name ?creatorName . } }\
						" + vrc
						+ createdInterval
						+ title
						+ description
						+ creator
						+ status
						+ ro
						+ "OS_TOKEN"
					+ " } " + orderBy + " LIMIT 100"
					;
					// FILTER regex( str( ?x), \"Pack\")\
				}else{
				    mc.setProperty("entityType", "NO_RO");
					var ro = "";
					if( 'ro' in payloadJSON){
						ro = payloadJSON.ro;
					}
					var resource = "";
					if( 'resource' in payloadJSON){
						resource = payloadJSON.resource;
						var orderBy = "ORDER BY ?term ?vocabulary ?annotatedSince ?annotatorName ?annotates";
						if( 'orderBy' in payloadJSON){
							orderBy = "ORDER BY " + payloadJSON.orderBy;
						}
						query = "\
							PREFIX ore: <http://www.openarchives.org/ore/terms/>\
							PREFIX  ao:    <http://purl.org/ao/>\
							PREFIX dct: <http://purl.org/dc/terms/>\
							PREFIX ro: <http://purl.org/wf4ever/ro#>\
							PREFIX foaf: <http://xmlns.com/foaf/0.1/>\
							PREFIX afn: <http://jena.hpl.hp.com/ARQ/function#>\
							SELECT (SAMPLE (?vocabulary1) AS ?vocabulary) (SAMPLE (?term1) AS ?term) (SAMPLE (?value1) AS ?value) (SAMPLE (?annotatedSince1) AS ?annotatedSince) (SAMPLE (?annotator1) AS ?annotator) (SAMPLE (?annotatorName1) AS ?annotatorName) (SAMPLE (?created1) AS ?created) (SAMPLE (?creator1) AS ?creator) (SAMPLE (?creatorName1) AS ?creatorName) (SAMPLE (?annotates1) AS ?annotates) (SAMPLE (?annotation1) AS ?annotation) (SAMPLE (?body1) AS ?body) (CONCAT( \"{\", GROUP_CONCAT( ?z; SEPARATOR=\", \"), \"}\") AS ?pairSet)\
							WHERE{\
								SELECT ?vocabulary1 ?term1 ?value1 ?annotatedSince1 ?annotator1 ?annotatorName1 ?created1 ?creator1 ?creatorName1 ?annotates1 ?annotation1 ?body1 ?z\
								WHERE {\
									VALUES (?ro ?res) {(<" + ro + "> <" + resource + ">)}\
									?ro ore:isDescribedBy ?manifest\
									GRAPH ?manifest{\
										{\
											?annotation1 ro:annotatesAggregatedResource ?res.\
											?annotation1 ao:body ?body1.\
											GRAPH ?body1{\
												?res ?metadata ?value1\
												OPTIONAL{\
													?value1 ?x ?y\
													BIND( CONCAT( \"'\", STR(?x), \"': '\", STR(?y), \"'\") AS ?z)\
												}\
											}\
											BIND( afn:namespace( ?metadata) AS ?vocabulary1)\
											BIND( afn:localname( ?metadata) AS ?term1)\
											OPTIONAL { ?annotation1 dct:created ?annotatedSince1;\
													dct:creator ?annotator1.\
												OPTIONAL{\
														?annotator1 foaf:name ?annotatorName1\
													}\
											}\
											OPTIONAL { ?body1 dct:created ?created1;\
													dct:creator ?creator1.\
												OPTIONAL{\
														?creator1 foaf:name ?creatorName1\
													}\
											}\
										}UNION{\
											?proxy ore:proxyFor ?res.\
											?annotation1 ro:annotatesAggregatedResource ?proxy.\
											?annotation1 ao:body ?body1.\
											GRAPH ?body1{\
												?proxy ?metadata ?value1\
												OPTIONAL{\
													?value1 ?x ?y\
													BIND( CONCAT( \"'\", STR(?x), \"': '\", STR(?y), \"'\") AS ?z)\
												}\
											}\
											BIND( afn:namespace( ?metadata) AS ?vocabulary1)\
											BIND( afn:localname( ?metadata) AS ?term1)\
											OPTIONAL { ?annotation1 dct:created ?annotatedSince1;\
													dct:creator ?annotator1.\
												OPTIONAL{\
														?annotator1 foaf:name ?annotatorName1\
													}\
											}\
											OPTIONAL { ?body1 dct:created ?created1;\
													dct:creator ?creator1.\
												OPTIONAL{\
														?creator1 foaf:name ?creatorName1\
													}\
											}\
											BIND( \"proxy\" AS ?annotates1)\
										}\
									}\
								}\
							} GROUP BY ?value1\ " + orderBy + "\
						";
					}else{
						var orderBy = "ORDER BY ?term ?vocabulary ?annotatedSince ?annotatorName";
						if( 'orderBy' in payloadJSON){
							orderBy = "ORDER BY " + payloadJSON.orderBy;
						}
						query = "\
							PREFIX ore: <http://www.openarchives.org/ore/terms/>\
							PREFIX  ao:    <http://purl.org/ao/>\
							PREFIX dct: <http://purl.org/dc/terms/>\
							PREFIX ro: <http://purl.org/wf4ever/ro#>\
							PREFIX foaf: <http://xmlns.com/foaf/0.1/>\
							PREFIX afn: <http://jena.hpl.hp.com/ARQ/function#>\
							SELECT (SAMPLE (?vocabulary1) AS ?vocabulary) (SAMPLE (?term1) AS ?term) (SAMPLE (?value1) AS ?value) (SAMPLE (?annotatedSince1) AS ?annotatedSince) (SAMPLE (?annotator1) AS ?annotator) (SAMPLE (?annotatorName1) AS ?annotatorName) (SAMPLE (?created1) AS ?created) (SAMPLE (?creator1) AS ?creator) (SAMPLE (?creatorName1) AS ?creatorName) (SAMPLE (?annotation1) AS ?annotation) (SAMPLE (?body1) AS ?body) (CONCAT( \"{\", GROUP_CONCAT( ?z; SEPARATOR=\", \"), \"}\") AS ?pairSet)\
							WHERE{\
								SELECT ?vocabulary1 ?term1 ?value1 ?annotatedSince1 ?annotator1 ?annotatorName1 ?created1 ?creator1 ?creatorName1 ?annotation1 ?body1 ?z\
								WHERE {\
									VALUES (?ro) {(<" + ro + ">)}\
									?ro ore:isDescribedBy ?manifest\
									GRAPH ?manifest{\
										?annotation1 ro:annotatesAggregatedResource ?ro.\
										?annotation1 ao:body ?body1.\
										GRAPH ?body1{\
											?ro ?metadata ?value1\
												OPTIONAL{\
													?value1 ?x ?y\
													BIND( CONCAT( \"'\", STR(?x), \"': '\", STR(?y), \"'\") AS ?z)\
												}\
										}\
										BIND( afn:namespace( ?metadata) AS ?vocabulary1)\
										BIND( afn:localname( ?metadata) AS ?term1)\
										OPTIONAL { ?annotation1 dct:created ?annotatedSince1;\
												dct:creator ?annotator1.\
											OPTIONAL{\
													?annotator1 foaf:name ?annotatorName1\
												}\
										}\
										OPTIONAL { ?body1 dct:created ?created1;\
												dct:creator ?creator1.\
											OPTIONAL{\
													?creator1 foaf:name ?creatorName1\
												}\
											}\
									}\
								}\
							} GROUP BY ?value1\ " + orderBy + "\
						";
					}
				}
				mc.setProperty("QUERY", query);
				//java.lang.System.out.println("QUERYYYY " + query);
				mc.setPayloadXML( <params xmlns=""><query>{query}</query></params>);
			//]]></script>
    <!-- choose the xml formatter -->
    <property name="messageType" scope="axis2" type="STRING" value="application/x-www-form-urlencoded"/>
    <!-- set headers -->
    <property name="Content-Type" scope="transport" type="STRING" value="application/x-www-form-urlencoded"/>
    <property name="Accept" scope="transport" type="STRING" value="application/sparql-results+json"/>
    <log level="custom">
        <property name="mylog" value="*********************** CALLING BACK END: SPARQL ********************"/>
    </log>
    <filter regex="RO" source="get-property('default', 'entityType')">
        <then>
            <filter regex="sparqlQuery" source="get-property('default', 'sparqlQuery')">
                <then>
                    <script language="js"><![CDATA[//
		            	var query = new String(mc.getProperty('QUERY'));
		            	query = query.replace("OS_TOKEN", '');
						mc.setPayloadXML( <params xmlns=""><query>{query}</query></params>);
						//java.lang.System.out.println("QUERY " + mc.getPayloadXML());
					//]]></script>
                    <property action="remove" name="REST_URL_POSTFIX" scope="axis2"/>
                    <call>
                        <endpoint>
                            <http uri-template="http://sandbox.rohub.org/rodl/sparql"/>
                        </endpoint>
                    </call>
                    <log level="custom">
                        <property expression="get-property('axis2', 'HTTP_SC')" name="SPARQL STATUS CODE"/>
                    </log>
                    <filter regex="^[45][0-9][0-9]" source="get-property('axis2', 'HTTP_SC')">
                        <then>
                            <log category="WARN" level="full">
                                <property name="APPL" value="FAILURE CALLING http://sandbox.rohub.org/rodl/sparql"/>
                                <property name="STEP" value="SUBOPERATION ENDED EXCEPTIONALLY"/>
                                <property expression="get-property('REQUEST_ID')" name="REQUEST_ID"/>
                                <property expression="get-property('axis2', 'HTTP_SC')" name="HTTP_SC"/>
                            </log>
                            <script language="js"><![CDATA[//
			                    java.lang.System.out.println("NO RESULTS");
					             var noResult = JSON.parse('{"head":{"vars":["ro","created","title","description","vrc","creatorName","creator","status", "geometry"]},' +
										'"results":{"bindings":[]}}');
								 mc.setPayloadJSON(noResult);
			         		//]]></script>
                            <drop/>
                        </then>
                        <else/>
                    </filter>
                    <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
                    <filter xpath="//results[count(*)=0]">
                        <then>
                            <respond/>
                        </then>
                        <else/>
                    </filter>
                    <log level="custom">
                        <property name="mylog" value="CALLING opensearch endpoint"/>
                    </log>
                    <iterate expression="//bindings" id="bindingsIterator">
                        <target>
                            <sequence>
                                <property expression="fn:concat('http://www.rohub.org/opensearch/?q=','&quot;', $body/bindings/ro/value, '&quot;', '&amp;', get-property('geometryParam'))" name="uri.var.openSearchUrl" scope="default" type="STRING"/>
                                <property expression="json-eval($)" name="curr_result" scope="default" type="STRING"/>
                                <call>
                                    <endpoint>
                                        <http method="get" uri-template="{uri.var.openSearchUrl}"/>
                                    </endpoint>
                                </call>
                                <script language="js"><![CDATA[//
						    			var payload = mc.getPayloadXML();
						    			var defNamespace = new Namespace('http://www.w3.org/2005/Atom');
						    			var osNamespace=new Namespace('http://a9.com/-/spec/opensearch/1.1/');
						    			var totalResults = payload..osNamespace::totalResults;
						    			var currResult = JSON.parse('{"bindings":[{}]}');
						    			if(totalResults == 0) {
							    			java.lang.System.out.println( "NO RESULTS IN OPENSEARCH SYSTEM FOR " + payload);
						    			} else {
						    				//ADD GEOMETRY INFORMATION TO CURRBINDING
						    				var entry = payload..defNamespace::entry;
						    				//java.lang.System.out.println( "entry " + entry);
						    				var georssNamespace = 'http://www.georss.org/georss';
											var geometryStr = '[]';
											var geometryJSON = JSON.parse(geometryStr);
											var points = entry..georssNamespace::point;
											for each(var currPoint in points) {
												geometryJSON.push({"type": "point", "value":""+currPoint});
											}
											var line = entry..georssNamespace::line;
											for each(var currLine in line) {
												geometryJSON.push({"type": "line", "value":""+currLine});
											}
											var polygons = entry..georssNamespace::polygon;
											for each(var currPoly in polygons) {
												geometryJSON.push({"type": "polygon", "value":""+currPoly});
											}
											//java.lang.System.out.println( "geometryJSON " + JSON.stringify(geometryJSON));
											
						    				var currBinding = JSON.parse(mc.getProperty('curr_result'));
						    				currBinding.bindings['geometry'] = geometryJSON;
						    				
											currResult = currBinding;
						    			}
						    			//java.lang.System.out.println("currResult " + JSON.stringify(currResult));
						    			mc.setPayloadJSON(JSON.stringify(currResult).replace(/\\"/g, "&quot;"));
									
					     //]]></script>
                            </sequence>
                        </target>
                    </iterate>
                    <property name="AGGREGATING" scope="default">
                        <myns:AGGREGATING xmlns:myns="http://acsys.it/"/>
                    </property>
                    <aggregate id="bindingsIterator">
                        <completeCondition timeout="120">
                            <messageCount max="-1" min="-1"/>
                        </completeCondition>
                        <onComplete enclosingElementProperty="AGGREGATING" expression="//bindings">
                            <script function="mergeGetListINResponse" key="mergeGetListINResponse" language="js"/>
                            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
                            <respond/>
                        </onComplete>
                    </aggregate>
                </then>
                <else>
                    <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
                    <property expression="fn:concat('http://www.rohub.org/opensearch/?',get-property('geometryParam'),'&amp;','count=100')" name="uri.var.openSearchUrl" scope="default" type="STRING"/>
                    <log level="custom">
                        <property name="mylog" value="CALLING open search end point"/>
                    </log>
                    <log level="custom">
                        <property expression="get-property('uri.var.openSearchUrl')" name="mylog"/>
                    </log>
                    <call>
                        <endpoint>
                            <http method="get" uri-template="{uri.var.openSearchUrl}"/>
                        </endpoint>
                    </call>
                    <property expression="count(//*[local-name()='entry' and namespace-uri()='http://www.w3.org/2005/Atom'])=0" name="NO_RESULT" scope="default" type="STRING"/>
                    <filter regex="true" source="get-property('NO_RESULT')">
                        <then>
                            <script language="js"><![CDATA[//
			                    java.lang.System.out.println("NO RESULTS");
					             var noResult = JSON.parse('{"head":{"vars":["ro","created","title","description","vrc","creatorName","creator","status", "geometry"]},' +
										'"results":{"bindings":[]}}');
								 mc.setPayloadJSON(noResult);
			         		//]]></script>
                            <respond/>
                        </then>
                        <else/>
                    </filter>
                    <iterate expression="//*[local-name()='entry' and namespace-uri()='http://www.w3.org/2005/Atom']" id="entryIterator">
                        <target>
                            <sequence>
                                <property expression="$body" name="curr_entry" scope="default" type="STRING"/>
                                <script language="js"><![CDATA[//
				                	var query = new String(mc.getProperty('QUERY'));
				                	var currEntry = new XML(mc.getProperty('curr_entry'));
				                	var defNamespace = new Namespace('http://www.w3.org/2005/Atom');
				                	var id = new String(currEntry..defNamespace::id);
				                	id = id.replace(/[+]/g, '\\\\+');
				                	query = query.replace("OS_TOKEN", 'FILTER regex( str( ?ro), "'+ id +'") ');
				                	query = query.replace("LIMIT 100", "LIMIT 1");
				                	//java.lang.System.out.println("NEW QUERY " + query);
				                	mc.setPayloadXML( <params xmlns=""><query>{query}</query></params>);
				                //]]></script>
                                <property name="messageType" scope="axis2" type="STRING" value="application/x-www-form-urlencoded"/>
                                <property name="Content-Type" scope="transport" type="STRING" value="application/x-www-form-urlencoded"/>
                                <property name="Accept" scope="transport" type="STRING" value="application/sparql-results+json"/>
                                <property action="remove" name="REST_URL_POSTFIX" scope="axis2"/>
                                <call>
                                    <endpoint>
                                        <http uri-template="http://sandbox.rohub.org/rodl/sparql"/>
                                    </endpoint>
                                </call>
                                <filter regex="^[45][0-9][0-9]" source="get-property('axis2', 'HTTP_SC')">
                                    <then>
                                        <log category="WARN" level="full">
                                            <property name="APPL" value="FAILURE CALLING http://sandbox.rohub.org/rodl/sparql"/>
                                            <property name="STEP" value="SUBOPERATION ENDED EXCEPTIONALLY"/>
                                            <property expression="get-property('REQUEST_ID')" name="REQUEST_ID"/>
                                            <property expression="get-property('axis2', 'HTTP_SC')" name="HTTP_SC"/>
                                        </log>
                                        <script language="js"><![CDATA[//
			                    java.lang.System.out.println("NO RESULTS");
					             var noResult = JSON.parse('{"head":{"vars":["ro","created","title","description","vrc","creatorName","creator","status", "geometry"]},' +
										'"results":{"bindings":[]}}');
								 mc.setPayloadJSON(noResult);
			         		//]]></script>
                                    </then>
                                    <else>
                                        <script language="js"><![CDATA[//
					    			var payloadJSON = mc.getPayloadJSON();
					    			var currEntry = new XML(mc.getProperty('curr_entry'));
					    			var geometryStr = '[]';
									var geometryJSON = JSON.parse(geometryStr);
									var georssNamespace = 'http://www.georss.org/georss';
									var points = currEntry..georssNamespace::point;
									for each(var currPoint in points) {
										geometryJSON.push({"type": "point", "value":""+currPoint});
									}
									var line = currEntry..georssNamespace::line;
									for each(var currLine in line) {
										geometryJSON.push({"type": "line", "value":""+currLine});
									}
									var polygons = currEntry..georssNamespace::polygon;
									for each(var currPoly in polygons) {
										geometryJSON.push({"type": "polygon", "value":""+currPoly});
									}
									//java.lang.System.out.println( "geometryJSON " + JSON.stringify(geometryJSON));
									var bindings = payloadJSON.results.bindings;
									for each (var currBinding in bindings) {
										currBinding['geometry'] = geometryJSON;
									}
					    			
					    			payloadJSON.head.vars.push('geometry');
					    			//java.lang.System.out.println( "payloadJSON " + JSON.stringify(payloadJSON).replace(/\\"/g, "&quot;"));
					    			
					    			//check on bindings (some results of opensearch are empty)
					    			var bb = payloadJSON.results.bindings;
					    			if(bb.length== 0) {
					    				java.lang.System.out.println( "NO SPARQL currEntry " + currEntry);
					    			}
					    			
					    			
					    			mc.setPayloadJSON(JSON.stringify(payloadJSON).replace(/\\"/g, "&quot;"));
					    			
					    			//java.lang.System.out.println( "payloadXML " + mc.getPayloadXML());
				     		//]]></script>
                                    </else>
                                </filter>
                            </sequence>
                        </target>
                    </iterate>
                    <property name="AGGREGATING" scope="default">
                        <myns:AGGREGATING xmlns:myns="http://acsys.it/"/>
                    </property>
                    <aggregate id="entryIterator">
                        <completeCondition timeout="120">
                            <messageCount max="-1" min="-1"/>
                        </completeCondition>
                        <onComplete enclosingElementProperty="AGGREGATING" expression="//bindings">
                            <script function="mergeGetListINResponse" key="mergeGetListINResponse" language="js"/>
                            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
                            <respond/>
                        </onComplete>
                    </aggregate>
                </else>
            </filter>
        </then>
        <else>
            <filter regex="NO_RO" source="get-property('default', 'entityType')">
                <then>
                    <log level="custom">
                        <property expression="get-property('default', 'entityType')" name="ENTITY TYPE"/>
                    </log>
                    <call>
                        <endpoint>
                            <http uri-template="http://sandbox.rohub.org/rodl/"/>
                        </endpoint>
                    </call>
                    <respond/>
                </then>
                <else/>
            </filter>
        </else>
    </filter>
</sequence>
