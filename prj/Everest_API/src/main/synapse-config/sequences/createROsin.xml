<?xml version="1.0" encoding="UTF-8"?>
<sequence name="createROsin" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <enrich>
        <source clone="true" type="body"/>
        <target property="BODY_FOR_RESOURCES" type="property"/>
    </enrich>
    <property expression="$trp:Authorization" name="AUTH" scope="default" type="STRING"/>
    <!--++
        				It is expected that the client calls this operation with this request:
        				
						POST /everest/ROs HTTP/1.1
						Host: localhost:8280
						Content-Type: application/json
						Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
						Slug: cde
						Content-Length: 243
						
						{"ro_title": "The Title", "ro_desc": "The Description", "ro_vrc": "CNR", "internal": [{"myfolder/file1.txt": "MTIz"}, {"myfolder/file2.txt": "NDU2"}],"external": ["http://sdeg.com/resource1.html", "https://sdeg.it/res2.do"], "mode": "PRIVATE"}
						
 						Please note that the value of json fields in the http body are only examples. Read EverestAPI_interface_documentation_<version>.docx for details.
						Using curl the corresponding command would be:
						curl -v http://localhost:8280/everest/ROs -H "Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8" -H "Content-Type: application/json" -H "Slug: cde" -d "{\"ro_title\": \"The Title\", \"ro_desc\": \"The Description\", \"ro_vrc\": \"CNR\", \"internal\": [{\"myfolder/file1.txt\": \"MTIz\"}, {\"myfolder/file2.txt\": \"NDU2\"}],\"external\": [\"http://sdeg.com/resource1.html\", \"https://sdeg.it/res2.do\"], \"mode\": \"PRIVATE\"}"
						
						With this only invocation by the client, various invocations are performed to the rohub backend. Those are:
						1. Creation of the RO with a given name, title, and description
						2. Optional setting public/private visibility mode (access rights)
						3. Optional aggregation of internal resources
						4. Optional aggregation of external resources
						5. Annotate the RO with the title, description, and VRC
        			 -->
    <!-- spawn one more separate thread to aggregate resources (see below for the main thread) -->
    <!--payloadFactory media-type="xml">
                                                <format>
                                                    <ms11:text xmlns:ms11="http://ws.apache.org/commons/ns/payload">MTIz</ms11:text>
                                                </format>
                                                <args/>
                                            </payloadFactory-->
    <log level="custom">
        <property name="mylog" value="***************************** RECEIVED REQUEST **************************"/>
        <property expression="$trp:Authorization" name="auth"/>
        <property expression="$trp:Slug" name="slug"/>
    </log>
    <!--++
            			do the first invocation to the backend:
            			1. Creation of the RO with a given name, title, and description
            			
                        The http request must be this (given the example client request above):
                        
	                        POST /rodl/ROs HTTP/1.1
							Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
							Accept: */*
							Slug: cde
							Content-Type: application/xml
							Transfer-Encoding: chunked
							Host: sandbox.rohub.org
							Connection: Keep-Alive
							User-Agent: Synapse-PT-HttpComponents-NIO
							
							0
							
							Please note that the http body is empty; all information are contained in the http headers.
							Please also note the synapse and therefore wso2esb works by "deltas": only differences between the outgoing requested and the incoming one are to be set.
                     -->
    <!-- this is needed in order to not block the POST request containing no body -->
    <property name="FORCE_POST_PUT_NOBODY" scope="axis2" type="BOOLEAN" value="true"/>
    <!-- No directive is needed to set Slug and Authorization header parameters because they are exactly equal to those coming from the request  -->
    <!-- next two directives (1.a and 1.b) are needed to empty the body for the next call to rohub: I do not know how to empty a json body, so I transform it in xml -->
    <!-- 1.a: transform the body format from json to xml -->
    <!-- (WSO2ESB) really speaking, here it is creating a new xml property of the mc containing the xml tree of the request body, in addition to the json tree-->
    <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
    <!-- 1.b: empty the payloadXML of the request through this script-->
    <!-- (WSO2ESB) the deletion of this xml tree does not affect the json object. Indeed the json object unaltered will be used next. (see below) -->
    <script language="js"><![CDATA[mc.getEnvelope().getBody().getFirstElement().detach();]]></script>
    <log level="custom">
        <property name="mylog" value="***************************** CALL: CREATE A NEW RESEARCH OBJECT **************************"/>
    </log>
    <!-- the request has been so synthesized and the back-end can be invoked right now -->
    <call>
        <endpoint>
            <http uri-template="http://sandbox.rohub.org/rodl/"/>
        </endpoint>
    </call>
    <!-- The expected response is this:

	            HTTP/1.1 201 Created
				Date: Fri, 13 Jan 2017 14:50:55 GMT
				Server: Apache
				Location: http://sandbox.rohub.org/rodl/ROs/cde-20/
				Content-disposition: attachment; filename=".ro/manifest.rdf
				Content-Length: 4354
				Keep-Alive: timeout=200, max=100
				Connection: Keep-Alive
				Content-Type: application/rdf+xml
				
				here the body (that is not needed)
            
             -->
    <!-- save in a property (RONAME) the URI of the just created RO got in the Location http header of the response -->
    <property expression="$trp:Location" name="RONAME" scope="default" type="STRING"/>
    <script language="js"><![CDATA[//
            	var urldecoded = decodeURIComponent( mc.getProperty("RONAME"));
            	mc.setProperty("LOCATION", urldecoded);
            //]]></script>
    <property expression="get-property('LOCATION')" name="uri.var.location" scope="default" type="STRING"/>
    <clone continueParent="true">
        <target sequence="CreateROs_AggregateROAnnotations"/>
    </clone>
    <!-- keep on processing if the response status code is what is expected to be in case of correct back end response, that is 201 in this case.
            In the else branch (now missing) exceptional response must be handled properly!
            -->
    <filter regex="201" source="get-property('axis2', 'HTTP_SC')">
        <then>
            <log level="custom">
                <property name="mylog" value="***************************** RECEIVED RESPONSE FROM: CREATE A NEW RESEARCH OBJECT **************************"/>
                <property expression="$trp:Location" name="LOCATION"/>
            </log>
            <!--
                    	do the next invocation to the backend, if there is a "mode" field in the client request:
						2. Optional setting public/private visibility mode (access rights).
                    	Next invocations are performed in parallel taking advantage of backend computing power, while at the same time, in order to minimize user-perceived latency, the user will receive the response to her request using just the info from the response of the first invocation to the back end.

                    	So spawn a new execution thread for this invocation.

                    -->
            <clone continueParent="true">
                <target sequence="CreateRos_SetMode"/>
            </clone>
            <!--++
                        Let's call the RO API to annotate the just created RO with title and description (see REQUEST below), and let's reply to the client (see RESPONSE below).

						REQUEST
						
                    	I need to create a POST request to this url (This must be the url given by the value of "Location" http header in the response of the previous RO Creation call):
                    	
	                    	http://sandbox.wf4ever-project.org/rodl/ROs/OneMoreRo-14/
                    	
                    	with header parameters like these:
                    	 
	                        Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
	                        Slug: title.rdf
							Link: <http://sandbox.wf4ever-project.org/rodl/ROs/OneMoreRo-14/>; rel="http://purl.org/ao/annotatesResource
                        
                        Please note that: OneMoreRo-14 is an example of ro name, and the Slug is an internal name at the moment not settable by the user and is always "title.rdf".
                        
                        The Payload of the POST request must be the rdf/xml representation of the body of the annotation.

		                    <rdf:RDF xmlns:roevo='http://purl.org/wf4ever/roevo#' xmlns:pavprov='http://purl.org/pav/provenance/2.0/' xmlns:ore-owl='http://purl.org/wf4ever/ore-owl' xmlns:ao='http://purl.org/ao/' xmlns:skos='http://www.w3.org/TR/skos-reference/skos-owl1-dl.rdf' xmlns:prov='http://www.w3.org/ns/prov#' xmlns:wfdesc='http://purl.org/wf4ever/wfdesc#' xmlns:pav='http://purl.org/pav/2.0/' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:ro='http://purl.org/wf4ever/ro#' xmlns:roterms='http://purl.org/wf4ever/roterms#' xmlns:foaf='http://xmlns.com/foaf/0.1/' xmlns:wfprov='http://purl.org/wf4ever/wfprov#' xmlns:dct='http://purl.org/dc/terms/' xmlns:ore='http://www.openarchives.org/ore/terms/' xmlns:pavauth='http://purl.org/pav/authoring/2.0/' xmlns:wf4ever='http://purl.org/wf4ever/wf4ever#' xmlns:aocore='http://purl.org/ao/core/' >
			                    <rdf:Description rdf:about=''>
				                    <dct:title rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{ro_title}</dct:title>
				                    <dct:description rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{ro_desc}</dct:description>
			                    </rdf:Description>
			                </rdf:RDF>

                        Please note that it is possible to put both annotations (title and descritpion) in one rdf/xml resource, thas making it necessary to call the RO API jsut once instead of two.
						In addition note that it is not needed to specify the resource (in this case the RO) these annotations are bout, indeed rdf:about attribute is left empty.

						This is good because I do not know how to set xml attribute values in the next template instruction (but only xml element values using curly braces!)

						RESPONSE 
							It must be something like this:
						
							HTTP/1.1 201 Created
							
							Content-Type: application/json; charset=UTF-8
							Date: Sun, 13 Nov 2016 19:45:13 GMT
							Content-Length: 71
							
							{"ro_name":"http://sandbox.wf4ever-project.org/rodl/ROs/OneMoreRo-14/"}
					
						Please note that ro_name field value in the json body must be the url given by the value of the Location http header in the response of the previous call to the RO API for the annotation.
                     -->
            <!-- spawn a separate thread to aggregate annotations (see below for the main thread) -->
            <clone continueParent="true">
                <target sequence="CreateROs_AggregateResources"/>
            </clone>
            <!-- main thread replying to the client without waiting for the response by the aggregation call -->
            <!-- no http header must be set explicitly. Those coming from the response of the preceding call must be removed -->
            <!-- (WSO2ESB) There is no way to delete multiple headers with the same field name, indeed one is left from the previous response from roAPI to the next to the client: Link: <http://sandbox.wf4ever-project.org/rodl/ROs/OneMoreRo-14/>; rel="http://purl.org/ao/annotatesResource"-->
            <property action="remove" name="TRANSPORT_HEADERS" scope="axis2"/>
            <!-- next directive is to avoid using Transfer-Encoding: chunked -->
            <property name="DISABLE_CHUNKING" scope="axis2" type="STRING" value="true"/>
            <!-- set the json payload -->
            <payloadFactory media-type="json">
                <format>{"ro_name":"$1"}</format>
                <args>
                    <arg evaluator="xml" expression="get-property('RONAME')"/>
                </args>
            </payloadFactory>
            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            <log level="custom">
                <property name="mylog" value="*********************** REPLYING TO THE CLIENT ********************"/>
            </log>
            <respond/>
        </then>
        <else>
            <log level="full"/>
            <log level="custom">
                <property expression="get-property('axis2', 'HTTP_SC')" name="STATUS_CODE"/>
            </log>
            <respond/>
        </else>
    </filter>
</sequence>
