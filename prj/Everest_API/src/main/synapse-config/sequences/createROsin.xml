<?xml version="1.0" encoding="UTF-8"?>
<sequence name="createROsin" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <enrich>
        <source clone="true" type="body"/>
        <target property="BODY_FOR_RESOURCES" type="property"/>
    </enrich>
    <property expression="$trp:Authorization" name="AUTH" scope="default" type="STRING"/>
    <!--++
        				It is expected that the client calls this operation with this request:
        				
						POST /everest/ROs HTTP/1.1
						Host: localhost:8280
						Content-Type: application/json
						Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
						Slug: cde
						Content-Length: 243
						
						{"ro_title": "The Title", "ro_desc": "The Description", "ro_vrc": "CNR", "internal": [{"myfolder/file1.txt": "MTIz"}, {"myfolder/file2.txt": "NDU2"}],"external": ["http://sdeg.com/resource1.html", "https://sdeg.it/res2.do"], "mode": "PRIVATE"}
						
 						Please note that the value of json fields in the http body are only examples. Read EverestAPI_interface_documentation_<version>.docx for details.
						Using curl the corresponding command would be:
						curl -v http://localhost:8280/everest/ROs -H "Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8" -H "Content-Type: application/json" -H "Slug: cde" -d "{\"ro_title\": \"The Title\", \"ro_desc\": \"The Description\", \"ro_vrc\": \"CNR\", \"internal\": [{\"myfolder/file1.txt\": \"MTIz\"}, {\"myfolder/file2.txt\": \"NDU2\"}],\"external\": [\"http://sdeg.com/resource1.html\", \"https://sdeg.it/res2.do\"], \"mode\": \"PRIVATE\"}"
						
						With this only invocation by the client, various invocations are performed to the rohub backend. Those are:
						1. Creation of the RO with a given name, title, and description
						2. Optional setting public/private visibility mode (access rights)
						3. Optional aggregation of internal resources
						4. Optional aggregation of external resources
						5. Annotate the RO with the title, description, and VRC
        			 -->
    <!-- spawn one more separate thread to aggregate resources (see below for the main thread) -->
    <!--payloadFactory media-type="xml">
                                                <format>
                                                    <ms11:text xmlns:ms11="http://ws.apache.org/commons/ns/payload">MTIz</ms11:text>
                                                </format>
                                                <args/>
                                            </payloadFactory-->
    <log level="custom">
        <property name="mylog" value="***************************** RECEIVED REQUEST **************************"/>
        <property expression="$trp:Authorization" name="auth"/>
        <property expression="$trp:Slug" name="slug"/>
    </log>
    <!--++
            			do the first invocation to the backend:
            			1. Creation of the RO with a given name, title, and description
            			
                        The http request must be this (given the example client request above):
                        
	                        POST /rodl/ROs HTTP/1.1
							Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
							Accept: */*
							Slug: cde
							Content-Type: application/xml
							Transfer-Encoding: chunked
							Host: sandbox.rohub.org
							Connection: Keep-Alive
							User-Agent: Synapse-PT-HttpComponents-NIO
							
							0
							
							Please note that the http body is empty; all information are contained in the http headers.
							Please also note the synapse and therefore wso2esb works by "deltas": only differences between the outgoing requested and the incoming one are to be set.
                     -->
    <!-- this is needed in order to not block the POST request containing no body -->
    <property name="FORCE_POST_PUT_NOBODY" scope="axis2" type="BOOLEAN" value="true"/>
    <!-- No directive is needed to set Slug and Authorization header parameters because they are exactly equal to those coming from the request  -->
    <!-- next two directives (1.a and 1.b) are needed to empty the body for the next call to rohub: I do not know how to empty a json body, so I transform it in xml -->
    <!-- 1.a: transform the body format from json to xml -->
    <!-- (WSO2ESB) really speaking, here it is creating a new xml property of the mc containing the xml tree of the request body, in addition to the json tree-->
    <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
    <!-- 1.b: empty the payloadXML of the request through this script-->
    <!-- (WSO2ESB) the deletion of this xml tree does not affect the json object. Indeed the json object unaltered will be used next. (see below) -->
    <script language="js"><![CDATA[mc.getEnvelope().getBody().getFirstElement().detach();]]></script>
    <log level="custom">
        <property name="mylog" value="***************************** CALL: CREATE A NEW RESEARCH OBJECT **************************"/>
    </log>
    <!-- the request has been so synthesized and the back-end can be invoked right now -->
    <call>
        <endpoint>
            <http uri-template="http://sandbox.rohub.org/rodl/"/>
        </endpoint>
    </call>
    <!-- The expected response is this:

	            HTTP/1.1 201 Created
				Date: Fri, 13 Jan 2017 14:50:55 GMT
				Server: Apache
				Location: http://sandbox.rohub.org/rodl/ROs/cde-20/
				Content-disposition: attachment; filename=".ro/manifest.rdf
				Content-Length: 4354
				Keep-Alive: timeout=200, max=100
				Connection: Keep-Alive
				Content-Type: application/rdf+xml
				
				here the body (that is not needed)
            
             -->
    <!-- save in a property (RONAME) the URI of the just created RO got in the Location http header of the response -->
    <property expression="$trp:Location" name="RONAME" scope="default" type="STRING"/>
    <script language="js"><![CDATA[//
            	var urldecoded = decodeURIComponent( mc.getProperty("RONAME"));
            	mc.setProperty("LOCATION", urldecoded);
            //]]></script>
    <property expression="get-property('LOCATION')" name="uri.var.location" scope="default" type="STRING"/>
    <clone continueParent="true">
        <target>
            <sequence>
                <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                <property expression="get-property('RONAME')" name="resourceUri" scope="default" type="STRING"/>
                <enrich>
                    <source clone="true" property="BODY_FOR_RESOURCES" type="property"/>
                    <target type="body"/>
                </enrich>
                <script language="js"><![CDATA[//
												java.lang.System.out.println( "%%%%*******************************%%%%%%" + mc.getPayloadXML().toXMLString());
												//]]></script>
                <script language="js"><![CDATA[//
												java.lang.System.out.println( "%%%%*******************************%%%%%%" + mc.getPayloadXML().semanticAnnotation.toXMLString());
												//]]></script>
                <script language="js"><![CDATA[//
					var second = <second/>;
					second.appendChild( mc.getPayloadXML().semanticAnnotation);
					mc.setPayloadXML( second);
				//]]></script>
                <filter xpath=".[/*/*/semanticAnnotation]">
                    <then>
                        <script language="js"><![CDATA[//
												java.lang.System.out.println( "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + mc.getPayloadXML().toXMLString());
												//]]></script>
                        <script function="transform" key="transform" language="js"/>
                        <script language="js"><![CDATA[//
												java.lang.System.out.println( "_%%%%%%%%%%%%%%%%%%%_%%%%%%%%%%%%%%%%%%%_%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_%%" + mc.getPayloadXML().toXMLString());
												//]]></script>
                        <filter xpath=".[$body//forResource or $body//forProxy]">
                            <then>
                                <property action="remove" name="Location" scope="transport"/>
                                <property name="messageType" scope="axis2" type="STRING" value="application/rdf+xml"/>
                                <property name="Content-Type" scope="transport" type="STRING" value="application/rdf+xml"/>
                                <property action="remove" name="Link" scope="transport"/>
                                <!-- avoid setting the Slug parameter, thus letting RO API to choose annotation name -->
                                <property expression="get-property('AUTH')" name="Authorization" scope="transport" type="STRING"/>
                                <property expression="get-property('LOCATION')" name="uri.var.location" scope="default" type="STRING"/>
                                <iterate continueParent="true" expression="$body//forResource/*">
                                    <target>
                                        <sequence>
                                            <property expression="fn:concat('&lt;', get-property('resourceUri'), '>; rel=&quot;http://purl.org/ao/annotatesResource&quot;')" name="Link" scope="transport" type="STRING"/>
                                            <script language="js"><![CDATA[//
	                                                        var annotationBodyRdfXml =
																<rdf:RDF
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
							                    				/>
									                    	;
															var DescriptionBodyRdfXml =
						                    					<rdf:Description rdf:about={ mc.getProperty('resourceUri')}
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
						                    					/>
								                    		;
															DescriptionBodyRdfXml.appendChild( mc.getPayloadXML());
									                    	annotationBodyRdfXml.appendChild( DescriptionBodyRdfXml);
									                    	mc.setPayloadXML( annotationBodyRdfXml);
                                                        //]]></script>
                                            <call>
                                                <endpoint>
                                                    <http uri-template="{uri.var.location}"/>
                                                </endpoint>
                                            </call>
                                        </sequence>
                                    </target>
                                </iterate>
                                <iterate continueParent="true" expression="$body//forProxy/*">
                                    <target>
                                        <sequence>
                                            <property expression="fn:concat('&lt;', get-property('proxyUri'), '>; rel=&quot;http://purl.org/ao/annotatesResource&quot;')" name="Link" scope="transport" type="STRING"/>
                                            <script language="js"><![CDATA[//
	                                                        var annotationBodyRdfXml =
																<rdf:RDF
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
							                    				/>
									                    	;
															var DescriptionBodyRdfXml =
						                    					<rdf:Description rdf:about={ mc.getProperty('proxyUri')}
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
						                    					/>
								                    		;
															DescriptionBodyRdfXml.appendChild( mc.getPayloadXML());
									                    	annotationBodyRdfXml.appendChild( DescriptionBodyRdfXml);
									                    	mc.setPayloadXML( annotationBodyRdfXml);
                                                        //]]></script>
                                            <call>
                                                <endpoint>
                                                    <http uri-template="{uri.var.location}"/>
                                                </endpoint>
                                            </call>
                                        </sequence>
                                    </target>
                                </iterate>
                            </then>
                            <else/>
                        </filter>
                    </then>
                    <else/>
                </filter>
            </sequence>
        </target>
    </clone>
    <!-- keep on processing if the response status code is what is expected to be in case of correct back end response, that is 201 in this case.
            In the else branch (now missing) exceptional response must be handled properly!
            -->
    <filter regex="201" source="get-property('axis2', 'HTTP_SC')">
        <then>
            <log level="custom">
                <property name="mylog" value="***************************** RECEIVED RESPONSE FROM: CREATE A NEW RESEARCH OBJECT **************************"/>
                <property expression="$trp:Location" name="LOCATION"/>
            </log>
            <!--
                    	do the next invocation to the backend, if there is a "mode" field in the client request:
						2. Optional setting public/private visibility mode (access rights).
                    	Next invocations are performed in parallel taking advantage of backend computing power, while at the same time, in order to minimize user-perceived latency, the user will receive the response to her request using just the info from the response of the first invocation to the back end.

                    	So spawn a new execution thread for this invocation.

                    -->
            <clone continueParent="true">
                <target>
                    <sequence>
                        <filter xpath="$ctx:BODY_FOR_RESOURCES//mode">
                            <then>
                                <filter regex="PUBLIC" source="$ctx:BODY_FOR_RESOURCES//mode">
                                    <then/>
                                    <else>
                                        <log level="custom">
                                            <property name="mylog" value="***************************** CALLING BACK END: SETTING ACCESS RIGHT **************************"/>
                                            <property expression="$trp:Location" name="LOCATION"/>
                                        </log>
                                        <!--
                                                The url of the access control operation is http://sandbox.rohub.org/rodl/accesscontrol/modes/
                                                The request of the access control operation must be this (given the example client request):
                                                
                                                	POST /rodl/accesscontrol/modes/ HTTP/1.1
													Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
													Content-Type: application/json
													Content-Length: 67
													Host: sandbox.rohub.org
													Connection: Keep-Alive
													User-Agent: Synapse-PT-HttpComponents-NIO
													
													{"ro":"http://sandbox.rohub.org/rodl/ROs/cde-20/","mode":"PRIVATE"}
													
													
													Please note that the value of the "ro" field in the body of the request must be the URI of the RO,
													and the value of the "mode" field must be equal to the value of the "mode" field in the client request.
                                                -->
                                        <!-- Synthesize the body of the request with this template in "format" and assign variables through "args" directive -->
                                        <payloadFactory media-type="json">
                                            <format>
						    {"ro":"$1","mode":"$2"}
						</format>
                                            <args>
                                                <arg evaluator="xml" expression="get-property('RONAME')"/>
                                                <arg evaluator="xml" expression="$ctx:BODY_FOR_RESOURCES//mode"/>
                                            </args>
                                        </payloadFactory>
                                        <!-- disable default http-transfer method for synapse (Transfer-Encoding: chunked) -->
                                        <property name="DISABLE_CHUNKING" scope="axis2" type="STRING" value="true"/>
                                        <!-- set ContentType http header field to "application/json" -->
                                        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
                                        <!-- set Authorization http header field -->
                                        <property expression="get-property('AUTH')" name="Authorization" scope="transport" type="STRING"/>
                                        <!--  remaining http headers: Host, Connection, User-Agent, Content-Length are automatically set, so no more directive are needed. (Anyway they are not strictly needed by the back-end.) -->
                                        <!-- please note that two more http headers will be sent to the back-end:
                                                	Content-disposition: attachment; filename=".ro/manifest.rdf"
													Location: http://sandbox.rohub.org/rodl/ROs/cde-20/
													
												This is because they have not been deleted from the context and they are there from the first response from the back-end.
												Anyway, they are not dangerous, so no deletion is performed.
                                                 -->
                                        <!-- invoke the access control operation with the request just synthesized -->
                                        <call>
                                            <endpoint>
                                                <http uri-template="http://sandbox.rohub.org/rodl/accesscontrol/modes/"/>
                                            </endpoint>
                                        </call>
                                    </else>
                                </filter>
                            </then>
                            <else/>
                        </filter>
                        <drop/>
                    </sequence>
                </target>
            </clone>
            <!--++
                        Let's call the RO API to annotate the just created RO with title and description (see REQUEST below), and let's reply to the client (see RESPONSE below).

						REQUEST
						
                    	I need to create a POST request to this url (This must be the url given by the value of "Location" http header in the response of the previous RO Creation call):
                    	
	                    	http://sandbox.wf4ever-project.org/rodl/ROs/OneMoreRo-14/
                    	
                    	with header parameters like these:
                    	 
	                        Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
	                        Slug: title.rdf
							Link: <http://sandbox.wf4ever-project.org/rodl/ROs/OneMoreRo-14/>; rel="http://purl.org/ao/annotatesResource
                        
                        Please note that: OneMoreRo-14 is an example of ro name, and the Slug is an internal name at the moment not settable by the user and is always "title.rdf".
                        
                        The Payload of the POST request must be the rdf/xml representation of the body of the annotation.

		                    <rdf:RDF xmlns:roevo='http://purl.org/wf4ever/roevo#' xmlns:pavprov='http://purl.org/pav/provenance/2.0/' xmlns:ore-owl='http://purl.org/wf4ever/ore-owl' xmlns:ao='http://purl.org/ao/' xmlns:skos='http://www.w3.org/TR/skos-reference/skos-owl1-dl.rdf' xmlns:prov='http://www.w3.org/ns/prov#' xmlns:wfdesc='http://purl.org/wf4ever/wfdesc#' xmlns:pav='http://purl.org/pav/2.0/' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:ro='http://purl.org/wf4ever/ro#' xmlns:roterms='http://purl.org/wf4ever/roterms#' xmlns:foaf='http://xmlns.com/foaf/0.1/' xmlns:wfprov='http://purl.org/wf4ever/wfprov#' xmlns:dct='http://purl.org/dc/terms/' xmlns:ore='http://www.openarchives.org/ore/terms/' xmlns:pavauth='http://purl.org/pav/authoring/2.0/' xmlns:wf4ever='http://purl.org/wf4ever/wf4ever#' xmlns:aocore='http://purl.org/ao/core/' >
			                    <rdf:Description rdf:about=''>
				                    <dct:title rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{ro_title}</dct:title>
				                    <dct:description rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{ro_desc}</dct:description>
			                    </rdf:Description>
			                </rdf:RDF>

                        Please note that it is possible to put both annotations (title and descritpion) in one rdf/xml resource, thas making it necessary to call the RO API jsut once instead of two.
						In addition note that it is not needed to specify the resource (in this case the RO) these annotations are bout, indeed rdf:about attribute is left empty.

						This is good because I do not know how to set xml attribute values in the next template instruction (but only xml element values using curly braces!)

						RESPONSE 
							It must be something like this:
						
							HTTP/1.1 201 Created
							
							Content-Type: application/json; charset=UTF-8
							Date: Sun, 13 Nov 2016 19:45:13 GMT
							Content-Length: 71
							
							{"ro_name":"http://sandbox.wf4ever-project.org/rodl/ROs/OneMoreRo-14/"}
					
						Please note that ro_name field value in the json body must be the url given by the value of the Location http header in the response of the previous call to the RO API for the annotation.
                     -->
            <!-- spawn a separate thread to aggregate annotations (see below for the main thread) -->
            <clone continueParent="true">
                <target>
                    <sequence>
                        <log level="custom">
                            <property name="mylog" value="***************************** ITERATING OVER INTERNAL RESOURCES **************************"/>
                        </log>
                        <!--
	                    		do the next set of invocations to the back-end:
	                    			3. Optional aggregation of internal resources
                                For all fields children of the "internal" field in the body of the client request, invoke the aggregation operation of the back-end.
                                Given the example client request, internal resources to be aggregated are 2, because 2 are the fields children of the "internal" field : {"myfolder/file1.txt": "MTIz"}, {"myfolder/file2.txt": "NDU2"}
                                For the first invocation of the aggregation operation, the http request to be synthesized is (for the other invocation it is analogous, only the Slug header and the body will be different):
                                	
                                	POST /rodl/ROs/cde-20/ HTTP/1.1
									Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
									Slug: myfolder/file1.txt
									Content-Type: application/octet-stream
									Content-Length: 3
									Host: sandbox.rohub.org
									Connection: Keep-Alive
									User-Agent: Synapse-PT-HttpComponents-NIO
									
									123
									
								Please note that the value of the Slug header is given by the name of the "internal" child field corresponding to each step of the iteration
								Additionally, the body of the request is the content of the file to be aggregated.
								It must be got by base64-decoding the value of the "internal" child field corresponding to each step of the iteration.
								For example, for the first step of the iteration, the "internal" child field is "myfolder/file1.txt", whose value "MTIz", once decoded, gives "123".
                                -->
                        <iterate continueParent="true" expression="$ctx:BODY_FOR_RESOURCES//internal">
                            <target>
                                <sequence>
                                    <enrich>
                                        <source clone="true" type="body"/>
                                        <target property="ithIterationStep" type="property"/>
                                    </enrich>
                                    <script language="js"><![CDATA[//
                                    			var fileName = mc.getPayloadXML().resourceName;
                                    			var fileContent = mc.getPayloadXML().resourceBase64Content;
                                            	//var fileName = mc.getEnvelope().getBody().getChildElements().next().getLocalName();
                                            	mc.setProperty("fileName", fileName);
												//var fileContent = mc.getEnvelope().getBody().getFirstElement().getText();
						                   		java.lang.System.out.println("-------------------------------- fileName = " + fileName);
							                    var decoded = new java.lang.String( org.apache.axiom.util.base64.Base64Utils.decode( fileContent));
						                   		java.lang.System.out.println("-------------------------------- decoded = " + decoded);
							                    mc.setPayloadXML(
                                                    <ms11:text xmlns:ms11="http://ws.apache.org/commons/ns/payload">{decoded}</ms11:text>
							                    );
							        //]]></script>
                                    <!-- disable default http-transfer method for synapse (Transfer-Encoding: chunked) -->
                                    <property name="DISABLE_CHUNKING" scope="axis2" type="STRING" value="true"/>
                                    <property name="messageType" scope="axis2" type="STRING" value="text/plain"/>
                                    <!-- set http request header Content-Type: application/octet-stream -->
                                    <property name="ContentType" scope="axis2" type="STRING" value="application/octet-stream"/>
                                    <header name="Content-Type" scope="transport" value="application/octet-stream"/>
                                    <property name="Transfer-Encoding" scope="transport" type="STRING" value="base64"/>
                                    <!-- set http request header Slug to the filename got through the custom property filename set in the script directive above -->
                                    <property expression="get-property('fileName')" name="Slug" scope="transport" type="STRING"/>
                                    <!-- set the property uri.var.location to the url of the operation, to be used in the next "call" directive -->
                                    <property expression="get-property('LOCATION')" name="uri.var.location" scope="default" type="STRING"/>
                                    <!-- set http request header Authorization -->
                                    <property expression="get-property('AUTH')" name="Authorization" scope="transport" type="STRING"/>
                                    <!-- the other headers are set automatically: Content-Length, Host, Connection, User-Agent -->
                                    <!-- please note that two more http headers will be sent to the back-end:
                                                	Content-disposition: attachment; filename=".ro/manifest.rdf"
													Location: http://sandbox.rohub.org/rodl/ROs/cde-20/
													
												This is because they have not been deleted from the context and they are there from the first response from the back-end.
												Anyway, they are not dangerous, so no deletion is performed.
                                            -->
                                    <log level="custom">
                                        <property name="mylog" value="***************************** CALLING BACK END: AGGREGATE INTERNAL RESOURCE **************************"/>
                                    </log>
                                    <call>
                                        <endpoint>
                                            <http uri-template="{uri.var.location}"/>
                                        </endpoint>
                                    </call>
                                    <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                                    <property expression="$body//rdf:RDF/rdf:Description/ore:proxyFor/@rdf:resource" name="resourceUri" scope="default" type="STRING" xmlns:ore="http://www.openarchives.org/ore/terms/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
                                    <property expression="$body//rdf:RDF/rdf:Description[rdf:type/@rdf:resource='http://www.openarchives.org/ore/terms/Proxy']/@rdf:about" name="proxyUri" scope="default" type="STRING" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
                                    <enrich>
                                        <source clone="true" property="ithIterationStep" type="property"/>
                                        <target type="body"/>
                                    </enrich>
                                    <script function="transform" key="transform" language="js"/>
                                    <script language="js"><![CDATA[//
												java.lang.System.out.println( mc.getPayloadXML().toXMLString());
												//]]></script>
                                    <filter xpath=".[$body//forResource or $body//forProxy]">
                                        <then>
                                            <property action="remove" name="Location" scope="transport"/>
                                            <property name="messageType" scope="axis2" type="STRING" value="application/rdf+xml"/>
                                            <property name="Content-Type" scope="transport" type="STRING" value="application/rdf+xml"/>
                                            <property action="remove" name="Link" scope="transport"/>
                                            <!-- avoid setting the Slug parameter, thus letting RO API to choose annotation name -->
                                            <property expression="get-property('AUTH')" name="Authorization" scope="transport" type="STRING"/>
                                            <property expression="get-property('LOCATION')" name="uri.var.location" scope="default" type="STRING"/>
                                            <iterate continueParent="true" expression="$body//forResource/*">
                                                <target>
                                                    <sequence>
                                                        <property expression="fn:concat('&lt;', get-property('resourceUri'), '>; rel=&quot;http://purl.org/ao/annotatesResource&quot;')" name="Link" scope="transport" type="STRING"/>
                                                        <script language="js"><![CDATA[//
	                                                        var annotationBodyRdfXml =
																<rdf:RDF
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
							                    				/>
									                    	;
															var DescriptionBodyRdfXml =
						                    					<rdf:Description rdf:about={ mc.getProperty('resourceUri')}
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
						                    					/>
								                    		;
															DescriptionBodyRdfXml.appendChild( mc.getPayloadXML());
									                    	annotationBodyRdfXml.appendChild( DescriptionBodyRdfXml);
									                    	mc.setPayloadXML( annotationBodyRdfXml);
                                                        //]]></script>
                                                        <call>
                                                            <endpoint>
                                                                <http uri-template="{uri.var.location}"/>
                                                            </endpoint>
                                                        </call>
                                                    </sequence>
                                                </target>
                                            </iterate>
                                            <iterate continueParent="true" expression="$body//forProxy/*">
                                                <target>
                                                    <sequence>
                                                        <property expression="fn:concat('&lt;', get-property('proxyUri'), '>; rel=&quot;http://purl.org/ao/annotatesResource&quot;')" name="Link" scope="transport" type="STRING"/>
                                                        <script language="js"><![CDATA[//
	                                                        var annotationBodyRdfXml =
																<rdf:RDF
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
							                    				/>
									                    	;
															var DescriptionBodyRdfXml =
						                    					<rdf:Description rdf:about={ mc.getProperty('proxyUri')}
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
						                    					/>
								                    		;
															DescriptionBodyRdfXml.appendChild( mc.getPayloadXML());
									                    	annotationBodyRdfXml.appendChild( DescriptionBodyRdfXml);
									                    	mc.setPayloadXML( annotationBodyRdfXml);
                                                        //]]></script>
                                                        <call>
                                                            <endpoint>
                                                                <http uri-template="{uri.var.location}"/>
                                                            </endpoint>
                                                        </call>
                                                    </sequence>
                                                </target>
                                            </iterate>
                                        </then>
                                        <else/>
                                    </filter>
                                    <!--
                                            	Terminate here this message flow and discard the response, because it is of no use. (Possibly the response should be analyzed to handle errors)
                                            -->
                                    <drop/>
                                </sequence>
                            </target>
                            <!-- after this "iterate" directive due to xPath expression terminating in "*" the root-->
                        </iterate>
                        <log level="custom">
                            <property name="mylog" value="***************************** ITERATING OVER EXTERNAL RESOURCES **************************"/>
                        </log>
                        <!--
	                    		do the next set of invocations to the back-end:
	                    			4. Optional aggregation of external resources
                                For all items in the "external" field in the body of the client request, invoke the aggregation operation of the back-end.
                                Given the example client request, external resources to be aggregated are 2, because 2 are the items in the "external" field : ["http://sdeg.com/resource1.html", "https://sdeg.it/res2.do"]
                                For the first invocation of the aggregation operation, the http request to be synthesized is (for the other invocation it is analogous, only the attribute rdf:resource in the xml body must be set accordingly):
                                	
									POST /rodl/ROs/cde-20/ HTTP/1.1
									Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
									Content-Type: application/vnd.wf4ever.proxy
									Content-Length: 222
									Host: sandbox.rohub.org
									Connection: Keep-Alive
									User-Agent: Synapse-PT-HttpComponents-NIO
									
									<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:ore="http://www.openarchives.org/ore/terms/">
									  <ore:Proxy>
									    <ore:proxyFor rdf:resource="http://sdeg.com/resource1.html"/>
									  </ore:Proxy>
									</rdf:RDF>
									
								Please note that the value of the rdf:resource attribute in the xml body is given by the name of the "external" array item corresponding to each step of the iteration
								For example, for the first step of the iteration, the "external" array item is "http://sdeg.com/resource1.html".
 
                                -->
                        <iterate continueParent="true" expression="$ctx:BODY_FOR_RESOURCES//external">
                            <target>
                                <sequence>
                                    <enrich>
                                        <source clone="true" type="body"/>
                                        <target property="ithIterationStep" type="property"/>
                                    </enrich>
                                    <script language="js"><![CDATA[//
                                    			var uri = mc.getPayloadXML().resourceUri;
												var proxy = <rdf:RDF xmlns:ore='http://www.openarchives.org/ore/terms/' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'> <ore:Proxy> <ore:proxyFor rdf:resource={uri}/> </ore:Proxy> </rdf:RDF>;
							                    mc.setPayloadXML( proxy);]]></script>
                                    <!-- disable default http-transfer method for synapse (Transfer-Encoding: chunked) -->
                                    <property name="DISABLE_CHUNKING" scope="axis2" type="STRING" value="true"/>
                                    <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                                    <!-- set http request header Content-Type: application/vnd.wf4ever.proxy -->
                                    <property name="ContentType" scope="axis2" type="STRING" value="application/vnd.wf4ever.proxy"/>
                                    <header name="Content-Type" scope="transport" value="application/vnd.wf4ever.proxy"/>
                                    <property expression="get-property('LOCATION')" name="uri.var.location" scope="default" type="STRING"/>
                                    <property expression="get-property('AUTH')" name="Authorization" scope="transport" type="STRING"/>
                                    <!-- the other headers are set automatically: Content-Length, Host, Connection, User-Agent -->
                                    <!-- please note that two more http headers will be sent to the back-end:
                                                	Content-disposition: attachment; filename=".ro/manifest.rdf"
													Location: http://sandbox.rohub.org/rodl/ROs/cde-20/
													
												This is because they have not been deleted from the context and they are there from the first response from the back-end.
												Anyway, they are not dangerous, so no deletion is performed.
                                            -->
                                    <log level="custom">
                                        <property name="mylog" value="***************************** CALLING BACK END: AGGREGATE EXTERNAL RESOURCE **************************"/>
                                    </log>
                                    <call>
                                        <endpoint>
                                            <http uri-template="{uri.var.location}"/>
                                        </endpoint>
                                    </call>
                                    <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                                    <property expression="$body//rdf:RDF/rdf:Description/ore:proxyFor/@rdf:resource" name="resourceUri" scope="default" type="STRING" xmlns:ore="http://www.openarchives.org/ore/terms/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
                                    <property expression="$body//rdf:RDF/rdf:Description[rdf:type/@rdf:resource='http://www.openarchives.org/ore/terms/Proxy']/@rdf:about" name="proxyUri" scope="default" type="STRING" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
                                    <enrich>
                                        <source clone="true" property="ithIterationStep" type="property"/>
                                        <target type="body"/>
                                    </enrich>
                                    <script function="transform" key="transform" language="js"/>
                                    <script language="js"><![CDATA[//
												java.lang.System.out.println( mc.getPayloadXML().toXMLString());
												//]]></script>
                                    <filter xpath=".[$body//forResource or $body//forProxy]">
                                        <then>
                                            <property action="remove" name="Location" scope="transport"/>
                                            <property name="messageType" scope="axis2" type="STRING" value="application/rdf+xml"/>
                                            <property name="Content-Type" scope="transport" type="STRING" value="application/rdf+xml"/>
                                            <property action="remove" name="Link" scope="transport"/>
                                            <!-- avoid setting the Slug parameter, thus letting RO API to choose annotation name -->
                                            <property expression="get-property('AUTH')" name="Authorization" scope="transport" type="STRING"/>
                                            <property expression="get-property('LOCATION')" name="uri.var.location" scope="default" type="STRING"/>
                                            <iterate continueParent="true" expression="$body//forResource/*">
                                                <target>
                                                    <sequence>
                                                        <property expression="fn:concat('&lt;', get-property('resourceUri'), '>; rel=&quot;http://purl.org/ao/annotatesResource&quot;')" name="Link" scope="transport" type="STRING"/>
                                                        <script language="js"><![CDATA[//
	                                                        var annotationBodyRdfXml =
																<rdf:RDF
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
							                    				/>
									                    	;
															var DescriptionBodyRdfXml =
						                    					<rdf:Description rdf:about={ mc.getProperty('resourceUri')}
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
						                    					/>
								                    		;
															DescriptionBodyRdfXml.appendChild( mc.getPayloadXML());
									                    	annotationBodyRdfXml.appendChild( DescriptionBodyRdfXml);
									                    	mc.setPayloadXML( annotationBodyRdfXml);
                                                        //]]></script>
                                                        <call>
                                                            <endpoint>
                                                                <http uri-template="{uri.var.location}"/>
                                                            </endpoint>
                                                        </call>
                                                    </sequence>
                                                </target>
                                            </iterate>
                                            <iterate continueParent="true" expression="$body//forProxy/*">
                                                <target>
                                                    <sequence>
                                                        <property expression="fn:concat('&lt;', get-property('proxyUri'), '>; rel=&quot;http://purl.org/ao/annotatesResource&quot;')" name="Link" scope="transport" type="STRING"/>
                                                        <script language="js"><![CDATA[//
	                                                        var annotationBodyRdfXml =
																<rdf:RDF
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
							                    				/>
									                    	;
															var DescriptionBodyRdfXml =
						                    					<rdf:Description rdf:about={ mc.getProperty('proxyUri')}
								                    				xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
						                    					/>
								                    		;
															DescriptionBodyRdfXml.appendChild( mc.getPayloadXML());
									                    	annotationBodyRdfXml.appendChild( DescriptionBodyRdfXml);
									                    	mc.setPayloadXML( annotationBodyRdfXml);
                                                        //]]></script>
                                                        <call>
                                                            <endpoint>
                                                                <http uri-template="{uri.var.location}"/>
                                                            </endpoint>
                                                        </call>
                                                    </sequence>
                                                </target>
                                            </iterate>
                                        </then>
                                        <else/>
                                    </filter>
                                    <!--
                                            	Terminate here this message flow and discard the response, because it is of no use. (Possibly the response should be analyzed to handle errors)
                                            -->
                                    <drop/>
                                </sequence>
                            </target>
                        </iterate>
                        <!--
	                                do the next set of invocations to the back-end:
                    					5. Annotate the RO with the title, description, and VRC

                                
	                                Authorization: Bearer 7d6df5f8-6b5c-4d88-95e1-da101dcee6f8
									Slug: title.rdf
									Link: <http://sandbox.rohub.org/rodl/ROs/cde-20/>; rel="http://purl.org/ao/annotatesResource"
									Content-Type: application/xml
									Transfer-Encoding: chunked
									Host: sandbox.rohub.org
									Connection: Keep-Alive
									User-Agent: Synapse-PT-HttpComponents-NIO
									
									4c9
									<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:pavauth="http://purl.org/pav/authoring/2.0/" xmlns:ore="http://www.openarchives.org/ore/terms/" xmlns:wf4ever="http://purl.org/wf4ever/wf4ever#" xmlns:pav="http://purl.org/pav/2.0/" xmlns:roterms="http://purl.org/wf4ever/roterms#" xmlns:skos="http://www.w3.org/TR/skos-reference/skos-owl1-dl.rdf" xmlns:ao="http://purl.org/ao/" xmlns:acs="http://www.acsys.it/everest#" xmlns:dct="http://purl.org/dc/terms/" xmlns:ore-owl="http://purl.org/wf4ever/ore-owl" xmlns:wfprov="http://purl.org/wf4ever/wfprov#" xmlns:roevo="http://purl.org/wf4ever/roevo#" xmlns:aocore="http://purl.org/ao/core/" xmlns:pavprov="http://purl.org/pav/provenance/2.0/" xmlns:prov="http://www.w3.org/ns/prov#" xmlns:ro="http://purl.org/wf4ever/ro#" xmlns:wfdesc="http://purl.org/wf4ever/wfdesc#" xmlns:foaf="http://xmlns.com/foaf/0.1/">
									  <rdf:Description rdf:about="">
									    <dct:title rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The Title</dct:title>
									    <dct:description rdf:datatype="http://www.w3.org/2001/XMLSchema#string">The Description</dct:description>
									    <acs:vrc rdf:datatype="http://www.w3.org/2001/XMLSchema#string">CNR</acs:vrc>
									  </rdf:Description>
									</rdf:RDF>
									0
								
								Please note that the Slug header has been set to "title.rdf" and this value is embedded in the next block of directive. Its value is not important, it can be whatever.                                
                                -->
                        <!-- 
                                    create the rdf xml for the title, the description and the VRC that will be aggregated to the RO as an annotation
                                	from the former request body, values of ro_title, ro_desc and ro_vrc fields are read into an rdf xml template
                                 -->
                        <!-- (WSO2ESB) Note that I can still read the PayloadJSON from the mc even though with the previous access to the mc I deleted the payloadXML-->
                        <script language="js"><![CDATA[var ro_title = mc.getPayloadJSON().ro_title.toString();
				                    var ro_desc = mc.getPayloadJSON().ro_desc.toString();
				                    var ro_vrc = mc.getPayloadJSON().ro_vrc.toString();
				                    var ro_name = mc.getProperty('RONAME');
				                    mc.setPayloadXML(
				                    	<rdf:RDF xmlns:acs="http://www.acsys.it/everest#" xmlns:roevo='http://purl.org/wf4ever/roevo#' xmlns:pavprov='http://purl.org/pav/provenance/2.0/' xmlns:ore-owl='http://purl.org/wf4ever/ore-owl' xmlns:ao='http://purl.org/ao/' xmlns:skos='http://www.w3.org/TR/skos-reference/skos-owl1-dl.rdf' xmlns:prov='http://www.w3.org/ns/prov#' xmlns:wfdesc='http://purl.org/wf4ever/wfdesc#' xmlns:pav='http://purl.org/pav/2.0/' xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:ro='http://purl.org/wf4ever/ro#' xmlns:roterms='http://purl.org/wf4ever/roterms#' xmlns:foaf='http://xmlns.com/foaf/0.1/' xmlns:wfprov='http://purl.org/wf4ever/wfprov#' xmlns:dct='http://purl.org/dc/terms/' xmlns:ore='http://www.openarchives.org/ore/terms/' xmlns:pavauth='http://purl.org/pav/authoring/2.0/' xmlns:wf4ever='http://purl.org/wf4ever/wf4ever#' xmlns:aocore='http://purl.org/ao/core/' > <rdf:Description rdf:about=''> <dct:title rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{ro_title}</dct:title> <dct:description rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{ro_desc}</dct:description> <acs:vrc rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{ro_vrc}</acs:vrc>  </rdf:Description> </rdf:RDF>
				                    );]]></script>
                        <log level="custom">
                            <property name="mylog" value="***************************** ANNOTATION RDFXML rendered **************************"/>
                        </log>
                        <!-- remove Location header coming from previous response -->
                        <property action="remove" name="Location" scope="transport"/>
                        <!-- choose the xml formatter -->
                        <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                        <!-- set headers -->
                        <property name="Content-Type" scope="transport" type="STRING" value="application/rdf+xml"/>
                        <property name="Slug" scope="transport" type="STRING" value="title.rdf"/>
                        <property expression="get-property('AUTH')" name="Authorization" scope="transport" type="STRING"/>
                        <property expression="fn:concat('&lt;', get-property('RONAME'), '>; rel=&quot;http://purl.org/ao/annotatesResource&quot;')" name="Link" scope="transport" type="STRING"/>
                        <!-- the other headers are set automatically: Transfer-Encoding, Host, Connection, User-Agent -->
                        <!-- please note that one more http header will be sent to the back-end:
                                               	Content-disposition: attachment; filename=".ro/manifest.rdf"
												
									This is because it has not been deleted from the context and it is there from the first response from the back-end.
									Anyway, it is not dangerous, so no deletion is performed.
                                -->
                        <log level="custom">
                            <property name="mylog" value="*********************** CALLING BACK END: AGGREGATE ANNOTATIONS ********************"/>
                            <property expression="get-property('transport', 'Link')" name="TheLink"/>
                        </log>
                        <!-- call the annotation operation on the ro api -->
                        <property expression="get-property('LOCATION')" name="uri.var.location" scope="default" type="STRING"/>
                        <call>
                            <endpoint>
                                <http uri-template="{uri.var.location}"/>
                            </endpoint>
                        </call>
                        <!--
                                	Terminate here this message flow and discard the response, because it is of no use. (Possibly the response should be analyzed to handle errors)
                                -->
                        <drop/>
                    </sequence>
                </target>
            </clone>
            <!-- main thread replying to the client without waiting for the response by the aggregation call -->
            <!-- no http header must be set explicitly. Those coming from the response of the preceding call must be removed -->
            <!-- (WSO2ESB) There is no way to delete multiple headers with the same field name, indeed one is left from the previous response from roAPI to the next to the client: Link: <http://sandbox.wf4ever-project.org/rodl/ROs/OneMoreRo-14/>; rel="http://purl.org/ao/annotatesResource"-->
            <property action="remove" name="TRANSPORT_HEADERS" scope="axis2"/>
            <!-- next directive is to avoid using Transfer-Encoding: chunked -->
            <property name="DISABLE_CHUNKING" scope="axis2" type="STRING" value="true"/>
            <!-- set the json payload -->
            <payloadFactory media-type="json">
                <format>{"ro_name":"$1"}</format>
                <args>
                    <arg evaluator="xml" expression="get-property('RONAME')"/>
                </args>
            </payloadFactory>
            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            <log level="custom">
                <property name="mylog" value="*********************** REPLYING TO THE CLIENT ********************"/>
            </log>
            <respond/>
        </then>
        <else>
            <log level="full"/>
            <log level="custom">
                <property expression="get-property('axis2', 'HTTP_SC')" name="STATUS_CODE"/>
            </log>
            <respond/>
        </else>
    </filter>
</sequence>
